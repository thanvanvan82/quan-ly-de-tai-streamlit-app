import streamlit as st
import pandas as pd
from datetime import date
from supabase import create_client, Client

# --- KH·ªûI T·∫†O K·∫æT N·ªêI V·ªöI SUPABASE (AN TO√ÄN) ---
@st.cache_resource
def init_connection():
    """
    S·ª≠ d·ª•ng st.secrets ƒë·ªÉ l·∫•y credentials m·ªôt c√°ch an to√†n.
    """
    try:
        url = st.secrets["SUPABASE_URL"]
        key = st.secrets["SUPABASE_KEY"]
        return create_client(url, key)
    except KeyError as e:
        st.error(f"L·ªói k·∫øt n·ªëi Supabase: Kh√¥ng t√¨m th·∫•y {e} trong st.secrets. Vui l√≤ng c·∫•u h√¨nh file .streamlit/secrets.toml")
        st.stop()
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi Supabase: {str(e)}")
        st.stop()

supabase = init_connection()

# ====== L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng ======
@st.cache_data(ttl=60)  # Cache trong 60 gi√¢y ƒë·ªÉ tƒÉng hi·ªáu su·∫•t
def fetch_data():
    """
    L·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng san_pham_de_tai
    """
    try:
        response = supabase.table("san_pham_de_tai").select("*").order("created_at", desc=True).execute()
        if response.data:
            return pd.DataFrame(response.data)
        else:
            return pd.DataFrame()
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu: {str(e)}")
        return pd.DataFrame()

# ====== Th√™m d·ªØ li·ªáu m·ªõi ======
def insert_data(ten_san_pham, chu_tri, can_bo_phoi_hop, linh_vuc,
                thoi_gian_bat_dau, thoi_gian_ket_thuc, noi_dung, tu_khoa, link_luu_tru):
    """
    Th√™m s·∫£n ph·∫©m ƒë·ªÅ t√†i m·ªõi v√†o database
    """
    try:
        data = {
            "ten_san_pham": ten_san_pham,
            "chu_tri": chu_tri,
            "can_bo_phoi_hop": can_bo_phoi_hop,
            "linh_vuc": linh_vuc,
            "thoi_gian_bat_dau": thoi_gian_bat_dau.isoformat(),
            "thoi_gian_ket_thuc": thoi_gian_ket_thuc.isoformat(),
            "noi_dung": noi_dung,
            "tu_khoa": tu_khoa,
            "link_luu_tru": link_luu_tru
        }
        
        response = supabase.table("san_pham_de_tai").insert(data).execute()
        
        if response.data:
            st.cache_data.clear()  # X√≥a cache ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch
            return True
        else:
            return False
            
    except Exception as e:
        st.error(f"L·ªói khi th√™m d·ªØ li·ªáu: {str(e)}")
        return False

# ====== X√≥a d·ªØ li·ªáu ======
def delete_data(record_id):
    """
    X√≥a s·∫£n ph·∫©m ƒë·ªÅ t√†i theo ID
    """
    try:
        response = supabase.table("san_pham_de_tai").delete().eq("id", record_id).execute()
        if response.data:
            st.cache_data.clear()  # X√≥a cache ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch
            return True
        return False
    except Exception as e:
        st.error(f"L·ªói khi x√≥a d·ªØ li·ªáu: {str(e)}")
        return False

# ====== C·∫≠p nh·∫≠t d·ªØ li·ªáu ======
def update_data(record_id, ten_san_pham, chu_tri, can_bo_phoi_hop, linh_vuc,
                thoi_gian_bat_dau, thoi_gian_ket_thuc, noi_dung, tu_khoa, link_luu_tru):
    """
    C·∫≠p nh·∫≠t s·∫£n ph·∫©m ƒë·ªÅ t√†i theo ID
    """
    try:
        data = {
            "ten_san_pham": ten_san_pham,
            "chu_tri": chu_tri,
            "can_bo_phoi_hop": can_bo_phoi_hop,
            "linh_vuc": linh_vuc,
            "thoi_gian_bat_dau": thoi_gian_bat_dau.isoformat(),
            "thoi_gian_ket_thuc": thoi_gian_ket_thuc.isoformat(),
            "noi_dung": noi_dung,
            "tu_khoa": tu_khoa,
            "link_luu_tru": link_luu_tru
        }
        
        response = supabase.table("san_pham_de_tai").update(data).eq("id", record_id).execute()
        
        if response.data:
            st.cache_data.clear()  # X√≥a cache ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch
            return True
        return False
            
    except Exception as e:
        st.error(f"L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu: {str(e)}")
        return False

# ====== Validation functions ======
def validate_input(ten_san_pham, chu_tri, linh_vuc, thoi_gian_bat_dau, thoi_gian_ket_thuc):
    """
    Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu ƒë·∫ßu v√†o
    """
    errors = []
    
    if not ten_san_pham.strip():
        errors.append("T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    
    if not chu_tri.strip():
        errors.append("Ch·ªß tr√¨ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    
    if not linh_vuc.strip():
        errors.append("Lƒ©nh v·ª±c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    
    if thoi_gian_ket_thuc < thoi_gian_bat_dau:
        errors.append("Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu")
    
    return errors

# ====== Giao di·ªán Streamlit ======
st.set_page_config(
    page_title="Qu·∫£n l√Ω s·∫£n ph·∫©m ƒë·ªÅ t√†i", 
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üìë Qu·∫£n l√Ω s·∫£n ph·∫©m ƒë·ªÅ t√†i")
st.markdown("---")

# Sidebar menu
menu = st.sidebar.radio(
    "üîß Ch·ªçn ch·ª©c nƒÉng", 
    ["üìã Danh s√°ch", "‚ûï Th√™m m·ªõi", "‚úèÔ∏è Ch·ªânh s·ª≠a"],
    index=0
)

# ====== TAB DANH S√ÅCH ======
if menu == "üìã Danh s√°ch":
    st.subheader("üìã Danh s√°ch s·∫£n ph·∫©m ƒë·ªÅ t√†i")
    
    # Th√™m n√∫t refresh
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("üîÑ L√†m m·ªõi", type="secondary"):
            st.cache_data.clear()
            st.rerun()
    
    df = fetch_data()
    
    if not df.empty:
        # Th√™m t√≠nh nƒÉng t√¨m ki·∫øm
        search_term = st.text_input("üîç T√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m:", "")
        
        if search_term:
            df_filtered = df[df['ten_san_pham'].str.contains(search_term, case=False, na=False)]
        else:
            df_filtered = df
        
        st.info(f"T·ªïng s·ªë: {len(df_filtered)} s·∫£n ph·∫©m")
        
        # Hi·ªÉn th·ªã b·∫£ng v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp h∆°n
        if not df_filtered.empty:
            # ƒê·ªãnh d·∫°ng l·∫°i c√°c c·ªôt date n·∫øu c√≥
            for col in ['thoi_gian_bat_dau', 'thoi_gian_ket_thuc']:
                if col in df_filtered.columns:
                    df_filtered[col] = pd.to_datetime(df_filtered[col]).dt.strftime('%d/%m/%Y')
            
            st.dataframe(
                df_filtered,
                use_container_width=True,
                hide_index=True,
                column_config={
                    "ten_san_pham": st.column_config.TextColumn("T√™n s·∫£n ph·∫©m", width="medium"),
                    "chu_tri": st.column_config.TextColumn("Ch·ªß tr√¨", width="medium"),
                    "linh_vuc": st.column_config.TextColumn("Lƒ©nh v·ª±c", width="medium"),
                    "thoi_gian_bat_dau": st.column_config.TextColumn("Ng√†y b·∫Øt ƒë·∫ßu", width="small"),
                    "thoi_gian_ket_thuc": st.column_config.TextColumn("Ng√†y k·∫øt th√∫c", width="small"),
                    "link_luu_tru": st.column_config.LinkColumn("Link l∆∞u tr·ªØ", width="medium")
                }
            )
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.")
    else:
        st.info("üìù Ch∆∞a c√≥ d·ªØ li·ªáu. H√£y th√™m s·∫£n ph·∫©m ƒë·ªÅ t√†i ƒë·∫ßu ti√™n!")

# ====== TAB TH√äM M·ªöI ======
elif menu == "‚ûï Th√™m m·ªõi":
    st.subheader("‚ûï Th√™m s·∫£n ph·∫©m ƒë·ªÅ t√†i m·ªõi")
    
    with st.form("add_form", clear_on_submit=True):
        col1, col2 = st.columns(2)
        
        with col1:
            ten_san_pham = st.text_input("üìù T√™n s·∫£n ph·∫©m *", placeholder="Nh·∫≠p t√™n s·∫£n ph·∫©m...")
            chu_tri = st.text_input("üë§ Ch·ªß tr√¨ *", placeholder="Nh·∫≠p t√™n ch·ªß tr√¨...")
            can_bo_phoi_hop = st.text_input("ü§ù C√°n b·ªô ph·ªëi h·ª£p", placeholder="Nh·∫≠p t√™n c√°n b·ªô ph·ªëi h·ª£p...")
            linh_vuc = st.text_input("üéØ Lƒ©nh v·ª±c *", placeholder="Nh·∫≠p lƒ©nh v·ª±c...")
        
        with col2:
            thoi_gian_bat_dau = st.date_input(
                "üìÖ Th·ªùi gian b·∫Øt ƒë·∫ßu *", 
                value=date.today(),
                help="Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu d·ª± √°n"
            )
            thoi_gian_ket_thuc = st.date_input(
                "üìÖ Th·ªùi gian k·∫øt th√∫c *", 
                value=date.today(),
                help="Ch·ªçn ng√†y k·∫øt th√∫c d·ª± √°n"
            )
            tu_khoa = st.text_input("üè∑Ô∏è T·ª´ kh√≥a", placeholder="Nh·∫≠p t·ª´ kh√≥a, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y...")
            link_luu_tru = st.text_input("üîó Link l∆∞u tr·ªØ", placeholder="https://...")
        
        noi_dung = st.text_area(
            "üìÑ N·ªôi dung", 
            placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ s·∫£n ph·∫©m ƒë·ªÅ t√†i...",
            height=100
        )
        
        st.markdown("**C√°c tr∆∞·ªùng c√≥ d·∫•u * l√† b·∫Øt bu·ªôc*")
        
        submitted = st.form_submit_button("üíæ L∆∞u s·∫£n ph·∫©m", type="primary")
        
        if submitted:
            # Validate input
            errors = validate_input(ten_san_pham, chu_tri, linh_vuc, thoi_gian_bat_dau, thoi_gian_ket_thuc)
            
            if errors:
                for error in errors:
                    st.error(f"‚ùå {error}")
            else:
                # Insert data
                if insert_data(ten_san_pham, chu_tri, can_bo_phoi_hop, linh_vuc,
                             thoi_gian_bat_dau, thoi_gian_ket_thuc, noi_dung, tu_khoa, link_luu_tru):
                    st.success("‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m ƒë·ªÅ t√†i th√†nh c√¥ng!")
                    st.balloons()
                else:
                    st.error("‚ùå C√≥ l·ªói x·∫£y ra khi th√™m d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.")

# ====== TAB CH·ªàNH S·ª¨A ======
elif menu == "‚úèÔ∏è Ch·ªânh s·ª≠a":
    st.subheader("‚úèÔ∏è Ch·ªânh s·ª≠a s·∫£n ph·∫©m ƒë·ªÅ t√†i")
    
    df = fetch_data()
    
    if not df.empty:
        # Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ ch·ªânh s·ª≠a
        product_options = {f"{row['ten_san_pham']} (ID: {row['id']})": row['id'] 
                          for _, row in df.iterrows()}
        
        selected_product = st.selectbox(
            "üéØ Ch·ªçn s·∫£n ph·∫©m c·∫ßn ch·ªânh s·ª≠a:",
            options=list(product_options.keys()),
            index=None,
            placeholder="Ch·ªçn m·ªôt s·∫£n ph·∫©m..."
        )
        
        if selected_product:
            record_id = product_options[selected_product]
            current_data = df[df['id'] == record_id].iloc[0]
            
            # Hi·ªÉn th·ªã form ch·ªânh s·ª≠a
            with st.form("edit_form"):
                col1, col2 = st.columns(2)
                
                with col1:
                    ten_san_pham = st.text_input("üìù T√™n s·∫£n ph·∫©m *", value=current_data['ten_san_pham'])
                    chu_tri = st.text_input("üë§ Ch·ªß tr√¨ *", value=current_data['chu_tri'])
                    can_bo_phoi_hop = st.text_input("ü§ù C√°n b·ªô ph·ªëi h·ª£p", value=current_data.get('can_bo_phoi_hop', ''))
                    linh_vuc = st.text_input("üéØ Lƒ©nh v·ª±c *", value=current_data['linh_vuc'])
                
                with col2:
                    thoi_gian_bat_dau = st.date_input(
                        "üìÖ Th·ªùi gian b·∫Øt ƒë·∫ßu *",
                        value=pd.to_datetime(current_data['thoi_gian_bat_dau']).date()
                    )
                    thoi_gian_ket_thuc = st.date_input(
                        "üìÖ Th·ªùi gian k·∫øt th√∫c *",
                        value=pd.to_datetime(current_data['thoi_gian_ket_thuc']).date()
                    )
                    tu_khoa = st.text_input("üè∑Ô∏è T·ª´ kh√≥a", value=current_data.get('tu_khoa', ''))
                    link_luu_tru = st.text_input("üîó Link l∆∞u tr·ªØ", value=current_data.get('link_luu_tru', ''))
                
                noi_dung = st.text_area(
                    "üìÑ N·ªôi dung",
                    value=current_data.get('noi_dung', ''),
                    height=100
                )
                
                col_update, col_delete = st.columns([1, 1])
                
                with col_update:
                    update_submitted = st.form_submit_button("‚úèÔ∏è C·∫≠p nh·∫≠t", type="primary")
                
                with col_delete:
                    delete_submitted = st.form_submit_button("üóëÔ∏è X√≥a", type="secondary")
                
                if update_submitted:
                    errors = validate_input(ten_san_pham, chu_tri, linh_vuc, thoi_gian_bat_dau, thoi_gian_ket_thuc)
                    
                    if errors:
                        for error in errors:
                            st.error(f"‚ùå {error}")
                    else:
                        if update_data(record_id, ten_san_pham, chu_tri, can_bo_phoi_hop, linh_vuc,
                                     thoi_gian_bat_dau, thoi_gian_ket_thuc, noi_dung, tu_khoa, link_luu_tru):
                            st.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m ƒë·ªÅ t√†i th√†nh c√¥ng!")
                            st.rerun()
                        else:
                            st.error("‚ùå C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t d·ªØ li·ªáu.")
                
                if delete_submitted:
                    if st.session_state.get('confirm_delete') == record_id:
                        if delete_data(record_id):
                            st.success("‚úÖ ƒê√£ x√≥a s·∫£n ph·∫©m ƒë·ªÅ t√†i th√†nh c√¥ng!")
                            st.rerun()
                        else:
                            st.error("‚ùå C√≥ l·ªói x·∫£y ra khi x√≥a d·ªØ li·ªáu.")
                    else:
                        st.session_state['confirm_delete'] = record_id
                        st.warning("‚ö†Ô∏è Nh·∫•n l·∫°i n√∫t X√≥a ƒë·ªÉ x√°c nh·∫≠n x√≥a s·∫£n ph·∫©m n√†y!")
    else:
        st.info("üìù Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ ch·ªânh s·ª≠a.")

# ====== FOOTER ======
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666;'>
        <small>üìë H·ªá th·ªëng qu·∫£n l√Ω s·∫£n ph·∫©m ƒë·ªÅ t√†i | Phi√™n b·∫£n 2.0</small>
    </div>
    """, 
    unsafe_allow_html=True
)